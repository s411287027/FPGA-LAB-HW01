-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mattrans is
port (
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_we0 : OUT STD_LOGIC;
    A_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_we1 : OUT STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_we0 : OUT STD_LOGIC;
    B_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of mattrans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mattrans_mattrans,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=259,HLS_SYN_TPT=260,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=171,HLS_SYN_LUT=2353,HLS_VERSION=2022_2}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal transposeMatrix_U0_ap_start : STD_LOGIC;
    signal transposeMatrix_U0_ap_done : STD_LOGIC;
    signal transposeMatrix_U0_ap_continue : STD_LOGIC;
    signal transposeMatrix_U0_ap_idle : STD_LOGIC;
    signal transposeMatrix_U0_ap_ready : STD_LOGIC;
    signal transposeMatrix_U0_B_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal transposeMatrix_U0_B_ce0 : STD_LOGIC;
    signal transposeMatrix_U0_B_we0 : STD_LOGIC;
    signal transposeMatrix_U0_B_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal transposeMatrix_U0_B_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal transposeMatrix_U0_B_ce1 : STD_LOGIC;
    signal transposeMatrix_U0_B_we1 : STD_LOGIC;
    signal transposeMatrix_U0_B_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_35_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_A_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_35_1_proc_U0_A_ce0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_A_we0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_35_1_proc_U0_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_transposeMatrix_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_transposeMatrix_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mattrans_transposeMatrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_we0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mattrans_Loop_VITIS_LOOP_35_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    transposeMatrix_U0 : component mattrans_transposeMatrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => transposeMatrix_U0_ap_start,
        ap_done => transposeMatrix_U0_ap_done,
        ap_continue => transposeMatrix_U0_ap_continue,
        ap_ce => ap_const_logic_1,
        ap_idle => transposeMatrix_U0_ap_idle,
        ap_ready => transposeMatrix_U0_ap_ready,
        B_address0 => transposeMatrix_U0_B_address0,
        B_ce0 => transposeMatrix_U0_B_ce0,
        B_we0 => transposeMatrix_U0_B_we0,
        B_d0 => transposeMatrix_U0_B_d0,
        B_address1 => transposeMatrix_U0_B_address1,
        B_ce1 => transposeMatrix_U0_B_ce1,
        B_we1 => transposeMatrix_U0_B_we1,
        B_d1 => transposeMatrix_U0_B_d1);

    Loop_VITIS_LOOP_35_1_proc_U0 : component mattrans_Loop_VITIS_LOOP_35_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_VITIS_LOOP_35_1_proc_U0_ap_start,
        ap_done => Loop_VITIS_LOOP_35_1_proc_U0_ap_done,
        ap_continue => Loop_VITIS_LOOP_35_1_proc_U0_ap_continue,
        ap_idle => Loop_VITIS_LOOP_35_1_proc_U0_ap_idle,
        ap_ready => Loop_VITIS_LOOP_35_1_proc_U0_ap_ready,
        A_address0 => Loop_VITIS_LOOP_35_1_proc_U0_A_address0,
        A_ce0 => Loop_VITIS_LOOP_35_1_proc_U0_A_ce0,
        A_we0 => Loop_VITIS_LOOP_35_1_proc_U0_A_we0,
        A_d0 => Loop_VITIS_LOOP_35_1_proc_U0_A_d0);





    ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready <= ap_sync_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_transposeMatrix_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_transposeMatrix_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_transposeMatrix_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_transposeMatrix_U0_ap_ready <= ap_sync_transposeMatrix_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    A_address0 <= Loop_VITIS_LOOP_35_1_proc_U0_A_address0;
    A_address1 <= ap_const_lv8_0;
    A_ce0 <= Loop_VITIS_LOOP_35_1_proc_U0_A_ce0;
    A_ce1 <= ap_const_logic_0;
    A_d0 <= Loop_VITIS_LOOP_35_1_proc_U0_A_d0;
    A_d1 <= ap_const_lv32_0;
    A_we0 <= Loop_VITIS_LOOP_35_1_proc_U0_A_we0;
    A_we1 <= ap_const_logic_0;
    B_address0 <= transposeMatrix_U0_B_address0;
    B_address1 <= transposeMatrix_U0_B_address1;
    B_ce0 <= transposeMatrix_U0_B_ce0;
    B_ce1 <= transposeMatrix_U0_B_ce1;
    B_d0 <= transposeMatrix_U0_B_d0;
    B_d1 <= transposeMatrix_U0_B_d1;
    B_we0 <= transposeMatrix_U0_B_we0;
    B_we1 <= transposeMatrix_U0_B_we1;
    Loop_VITIS_LOOP_35_1_proc_U0_ap_continue <= ap_sync_done;
    Loop_VITIS_LOOP_35_1_proc_U0_ap_start <= ((ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= ap_sync_done;
    ap_idle <= (transposeMatrix_U0_ap_idle and Loop_VITIS_LOOP_35_1_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready or Loop_VITIS_LOOP_35_1_proc_U0_ap_ready);
    ap_sync_done <= (transposeMatrix_U0_ap_done and Loop_VITIS_LOOP_35_1_proc_U0_ap_done);
    ap_sync_ready <= (ap_sync_transposeMatrix_U0_ap_ready and ap_sync_Loop_VITIS_LOOP_35_1_proc_U0_ap_ready);
    ap_sync_transposeMatrix_U0_ap_ready <= (transposeMatrix_U0_ap_ready or ap_sync_reg_transposeMatrix_U0_ap_ready);
    transposeMatrix_U0_ap_continue <= ap_sync_done;
    transposeMatrix_U0_ap_start <= ((ap_sync_reg_transposeMatrix_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
