-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mattrans_Loop_VITIS_LOOP_35_1_proc_temp_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of mattrans_Loop_VITIS_LOOP_35_1_proc_temp_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010", 1 => "0010", 2 => "0010", 3 => "0010", 
    4 => "0010", 5 => "0010", 6 => "0010", 7 => "0010", 
    8 => "0010", 9 => "0010", 10 => "0010", 11 => "0010", 
    12 => "0010", 13 => "0010", 14 => "0010", 15 => "0010", 
    16 => "0010", 17 => "0011", 18 => "0100", 19 => "0101", 
    20 => "0110", 21 => "0111", 22 => "1000", 23 => "1001", 
    24 => "0001", 25 => "0010", 26 => "0011", 27 => "0100", 
    28 => "0101", 29 => "0110", 30 => "0111", 31 => "1000", 
    32 => "0010", 33 => "0100", 34 => "0110", 35 => "1000", 
    36 => "0001", 37 => "0011", 38 => "0101", 39 => "0111", 
    40 => "1001", 41 => "0010", 42 => "0100", 43 => "0110", 
    44 => "1000", 45 => "0001", 46 => "0011", 47 => "0101", 
    48 => "0010", 49 => "0101", 50 => "1000", 51 => "0010", 
    52 => "0101", 53 => "1000", 54 => "0010", 55 => "0101", 
    56 => "1000", 57 => "0010", 58 => "0101", 59 => "1000", 
    60 => "0010", 61 => "0101", 62 => "1000", 63 => "0010", 
    64 => "0010", 65 => "0110", 66 => "0001", 67 => "0101", 
    68 => "1001", 69 => "0100", 70 => "1000", 71 => "0011", 
    72 => "0111", 73 => "0010", 74 => "0110", 75 => "0001", 
    76 => "0101", 77 => "1001", 78 => "0100", 79 => "1000", 
    80 => "0010", 81 => "0111", 82 => "0011", 83 => "1000", 
    84 => "0100", 85 => "1001", 86 => "0101", 87 => "0001", 
    88 => "0110", 89 => "0010", 90 => "0111", 91 => "0011", 
    92 => "1000", 93 => "0100", 94 => "1001", 95 => "0101", 
    96 => "0010", 97 => "1000", 98 => "0101", 99 => "0010", 
    100 => "1000", 101 => "0101", 102 => "0010", 103 => "1000", 
    104 => "0101", 105 => "0010", 106 => "1000", 107 => "0101", 
    108 => "0010", 109 => "1000", 110 => "0101", 111 => "0010", 
    112 => "0010", 113 => "1001", 114 => "0111", 115 => "0101", 
    116 => "0011", 117 => "0001", 118 => "1000", 119 => "0110", 
    120 => "0100", 121 => "0010", 122 => "1001", 123 => "0111", 
    124 => "0101", 125 => "0011", 126 => "0001", 127 => "1000", 
    128 => "0010", 129 => "0001", 130 => "1001", 131 => "1000", 
    132 => "0111", 133 => "0110", 134 => "0101", 135 => "0100", 
    136 => "0011", 137 => "0010", 138 => "0001", 139 => "1001", 
    140 => "1000", 141 => "0111", 142 => "0110", 143 => "0101", 
    144 => "0010", 145 => "0010", 146 => "0010", 147 => "0010", 
    148 => "0010", 149 => "0010", 150 => "0010", 151 => "0010", 
    152 => "0010", 153 => "0010", 154 => "0010", 155 => "0010", 
    156 => "0010", 157 => "0010", 158 => "0010", 159 => "0010", 
    160 => "0010", 161 => "0011", 162 => "0100", 163 => "0101", 
    164 => "0110", 165 => "0111", 166 => "1000", 167 => "1001", 
    168 => "0001", 169 => "0010", 170 => "0011", 171 => "0100", 
    172 => "0101", 173 => "0110", 174 => "0111", 175 => "1000", 
    176 => "0010", 177 => "0100", 178 => "0110", 179 => "1000", 
    180 => "0001", 181 => "0011", 182 => "0101", 183 => "0111", 
    184 => "1001", 185 => "0010", 186 => "0100", 187 => "0110", 
    188 => "1000", 189 => "0001", 190 => "0011", 191 => "0101", 
    192 => "0010", 193 => "0101", 194 => "1000", 195 => "0010", 
    196 => "0101", 197 => "1000", 198 => "0010", 199 => "0101", 
    200 => "1000", 201 => "0010", 202 => "0101", 203 => "1000", 
    204 => "0010", 205 => "0101", 206 => "1000", 207 => "0010", 
    208 => "0010", 209 => "0110", 210 => "0001", 211 => "0101", 
    212 => "1001", 213 => "0100", 214 => "1000", 215 => "0011", 
    216 => "0111", 217 => "0010", 218 => "0110", 219 => "0001", 
    220 => "0101", 221 => "1001", 222 => "0100", 223 => "1000", 
    224 => "0010", 225 => "0111", 226 => "0011", 227 => "1000", 
    228 => "0100", 229 => "1001", 230 => "0101", 231 => "0001", 
    232 => "0110", 233 => "0010", 234 => "0111", 235 => "0011", 
    236 => "1000", 237 => "0100", 238 => "1001", 239 => "0101", 
    240 => "0010", 241 => "1000", 242 => "0101", 243 => "0010", 
    244 => "1000", 245 => "0101", 246 => "0010", 247 => "1000", 
    248 => "0101", 249 => "0010", 250 => "1000", 251 => "0101", 
    252 => "0010", 253 => "1000", 254 => "0101", 255 => "0010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

